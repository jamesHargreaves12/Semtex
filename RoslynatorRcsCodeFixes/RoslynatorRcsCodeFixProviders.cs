using Microsoft.CodeAnalysis.CodeFixes;
using Roslynator.CSharp.CodeFixes;

namespace RoslynatorRcsCodeFixes;

public static class RoslynatorRcsCodeFixProviders
{
    // Should be a good source https://github.com/JosefPihrt/Roslynator/blob/ed2e168e82bc1ba637627c4e379b88de354e80f4/src/CodeFixes/README.md
    public static readonly Dictionary<string, CodeFixProvider> SupportedCodeFixes =
        new Dictionary<string, CodeFixProvider>()
        {
            ["RCS1010"] = new UseVarInsteadOfExplicitTypeCodeFixProvider(),
            ["RCS1007"] = new AddBracesCodeFixProvider(),
            ["RCS1005"] = new SimplifyNestedUsingStatementCodeFixProvider(),
            ["RCS1009"] = new UseExplicitTypeInsteadOfVarInForEachCodeFixProvider(),
            ["RCS1013"] = new UsePredefinedTypeCodeFixProvider(),
            ["RCS1014"] = new UseExplicitlyOrImplicitlyTypedArrayCodeFixProvider(),
            ["RCS1016"] = new UseBlockBodyOrExpressionBodyCodeFixProvider(),
            ["RCS1020"] = new SimplifyNullableOfTCodeFixProvider(),
            ["RCS1021"] = new ConvertLambdaExpressionBodyToExpressionBodyCodeFixProvider(),
            ["RCS1031"] = new BlockCodeFixProvider(),
            ["RCS1032"] = new ParenthesizedExpressionCodeFixProvider(),
            ["RCS1033"] = new RemoveRedundantBooleanLiteralCodeFixProvider(),
            ["RCS1035"] = new InitializerCodeFixProvider(),
            ["RCS1038"] = new EmptyStatementCodeFixProvider(),
            ["RCS1039"] = new AttributeArgumentListCodeFixProvider(),
            ["RCS1040"] = new ElseClauseCodeFixProvider(),
            ["RCS1041"] = new RemoveEmptyInitializerCodeFixProvider(),
            ["RCS1042"] = new RemoveEnumDefaultBaseTypeCodeFixProvider(),
            ["RCS1044"] = new RemoveOriginalExceptionCodeFixProvider(),
            ["RCS1048"] = new AnonymousMethodCodeFixProvider(),
            ["RCS1049"] = new SimplifyBooleanComparisonCodeFixProvider(),
            ["RCS1050"] = new AddOrRemoveParenthesesWhenCreatingNewObjectCodeFixProvider(),
            ["RCS1052"] = new DeclareEachAttributeSeparatelyCodeFixProvider(),
            ["RCS1056"] = new UsingDirectiveCodeFixProvider(),
            ["RCS1058"] = new UseCompoundAssignmentCodeFixProvider(),
            ["RCS1061"] = new IfStatementCodeFixProvider(),
            ["RCS1066"] = new FinallyClauseCodeFixProvider(),
            ["RCS1068"] = new SimplifyLogicalNegationCodeFixProvider(),
            ["RCS1069"] = new CaseSwitchLabelCodeFixProvider(),
            ["RCS1071"] = new ConstructorDeclarationCodeFixProvider(),
            ["RCS1073"] = new IfStatementCodeFixProvider(),
            ["RCS1074"] = new ConstructorDeclarationCodeFixProvider(),
            ["RCS1077"] = new OptimizeLinqMethodCallCodeFixProvider(),
            ["RCS1078"] = new UseEmptyStringLiteralOrStringEmptyCodeFixProvider(),
            ["RCS1080"] = new InvocationExpressionCodeFixProvider(),
            ["RCS1081"] = new VariableDeclarationCodeFixProvider(),
            ["RCS1084"] = new ConditionalExpressionCodeFixProvider(),
            ["RCS1085"] = new UseAutoPropertyCodeFixProvider(),
            ["RCS1089"] = new AssignmentExpressionCodeFixProvider(),
            ["RCS1096"] = new UseHasFlagMethodOrBitwiseOperatorCodeFixProvider(),
            ["RCS1097"] = new InvocationExpressionCodeFixProvider(),
            ["RCS1098"] = new BinaryExpressionCodeFixProvider(),
            ["RCS1103"] = new IfStatementCodeFixProvider(),
            ["RCS1104"] = new ConditionalExpressionCodeFixProvider(),
            ["RCS1105"] = new InterpolationCodeFixProvider(),
            ["RCS1106"] = new DestructorDeclarationCodeFixProvider(),
            ["RCS1107"] = new InvocationExpressionCodeFixProvider(),
            ["RCS1112"] = new InvocationExpressionCodeFixProvider(),
            ["RCS1113"] = new BinaryExpressionCodeFixProvider(),
            ["RCS1114"] = new AssignmentExpressionCodeFixProvider(),
            ["RCS1118"] = new MarkLocalVariableAsConstCodeFixProvider(),
            ["RCS1123"] = new AddParenthesesWhenNecessaryCodeFixProvider(),
            ["RCS1124"] = new LocalDeclarationStatementCodeFixProvider(),
            ["RCS1128"] = new UseCoalesceExpressionCodeFixProvider(),
            ["RCS1129"] = new VariableDeclaratorCodeFixProvider(),
            ["RCS1132"] = new MemberDeclarationCodeFixProvider(),
            ["RCS1133"] = new StatementCodeFixProvider(),
            ["RCS1134"] = new StatementCodeFixProvider(),
            ["RCS1136"] = new SwitchSectionCodeFixProvider(),
            ["RCS1145"] = new BinaryExpressionCodeFixProvider(),
            ["RCS1146"] = new UseConditionalAccessCodeFixProvider(),
            ["RCS1151"] = new RemoveRedundantCastCodeFixProvider(),
            ["RCS1154"] = new EnumDeclarationCodeFixProvider(),
            ["RCS1155"] = new UseStringComparisonCodeFixProvider(),
            ["RCS1156"] = new BinaryExpressionCodeFixProvider(),
            ["RCS1160"] = new ConstructorDeclarationCodeFixProvider(),
            ["RCS1161"] = new EnumDeclarationCodeFixProvider(),
            ["RCS1169"] = new MemberDeclarationCodeFixProvider(),
            ["RCS1170"] = new MemberDeclarationCodeFixProvider(),
            ["RCS1171"] = new BlockCodeFixProvider(),
            ["RCS1172"] = new UseIsOperatorInsteadOfAsOperatorCodeFixProvider(),
            ["RCS1173"] = new IfStatementCodeFixProvider(),
            ["RCS1174"] = new RemoveRedundantAsyncAwaitCodeFixProvider(),
            ["RCS1179"] = new UnnecessaryAssignmentCodeFixProvider(),
            ["RCS1180"] = new StatementCodeFixProvider(),
            ["RCS1182"] = new BaseTypeCodeFixProvider(),
            ["RCS1186"] = new UseRegexInstanceInsteadOfStaticMethodCodeFixProvider(),
            ["RCS1187"] = new MemberDeclarationCodeFixProvider(),
            ["RCS1188"] = new PropertyDeclarationCodeFixProvider(),
            ["RCS1190"] = new BinaryExpressionCodeFixProvider(),
            ["RCS1192"] = new UnnecessaryUsageOfVerbatimStringLiteralCodeFixProvider(),
            // ["RCS1194"] = new ClassDeclarationCodeFixProvider(), // Here I think the best thing to do for now is turn this off as it doesn't work when you have a constructor
            // that is ambiguous to call with null values. TODO fix the analyzer.
            // check https://github.com/kgrzybek/modular-monolith-with-ddd.git ab2c7832f38f4332cc2746c44a8c5b2bb26d02f6 --source ab2c7832f38f4332cc2746c44a8c5b2bb26d02f6~1
            ["RCS1195"] = new BinaryExpressionCodeFixProvider(),
            ["RCS1196"] = new InvocationExpressionCodeFixProvider(),
            ["RCS1197"] = new OptimizeStringBuilderAppendCallCodeFixProvider(),
            ["RCS1198"] = new AvoidBoxingOfValueTypeCodeFixProvider(),
            ["RCS1199"] = new BinaryExpressionCodeFixProvider(),
            ["RCS1201"] = new StatementCodeFixProvider(), // Hmm I'm in split minds here this just checks that the containing type == the return type of the expression which is obvs not fool proof.
            ["RCS1204"] = new ObjectCreationExpressionCodeFixProvider(),
            ["RCS1205"] = new BaseArgumentListCodeFixProvider(),
            ["RCS1206"] = new ConditionalExpressionCodeFixProvider(),
            ["RCS1207"] = new UseAnonymousFunctionOrMethodGroupCodeFixProvider(),
            ["RCS1208"] = new IfStatementCodeFixProvider(),
            ["RCS1209"] = new OrderTypeParameterConstraintsCodeFixProvider(),
            ["RCS1211"] = new RemoveUnnecessaryElseCodeFixProvider(),
            ["RCS1212"] = new RemoveRedundantAssignmentCodeFixProvider(),
            ["RCS1213"] = new UnusedMemberCodeFixProvider(),
            ["RCS1214"] = new InterpolatedStringCodeFixProvider(),
            ["RCS1215"] = new ExpressionCodeFixProvider(),
            ["RCS1216"] = new UnnecessaryUnsafeContextCodeFixProvider(),
            ["RCS1217"] = new InterpolatedStringCodeFixProvider(),
            ["RCS1218"] = new SimplifyCodeBranchingCodeFixProvider(),
            ["RCS1220"] = new UsePatternMatchingInsteadOfIsAndCastCodeFixProvider(),
            ["RCS1221"] = new UsePatternMatchingInsteadOfAsAndNullCheckCodeFixProvider(),
            // ["RCS1223"] = new MarkTypeWithDebuggerDisplayAttributeCodeFixProvider(), //This should be on probably but its annoying so I'm turning it off for now 
            ["RCS1225"] = new ClassDeclarationCodeFixProvider(),
            ["RCS1230"] = new UnnecessaryExplicitUseOfEnumeratorCodeFixProvider(),
            ["RCS1233"] = new BinaryExpressionCodeFixProvider(),
            // ["RCS1234"] = new EnumMemberDeclarationCodeFixProvider(),// Don't want this as it contests with constant value code fix provider
            ["RCS1235"] = new OptimizeMethodCallCodeFixProvider(),
            ["RCS1238"] = new ConditionalExpressionCodeFixProvider(),
            ["RCS1239"] = new WhileStatementCodeFixProvider(),
            ["RCS1240"] = new BinaryExpressionCodeFixProvider(),
            // ["RCS1242"] = new ParameterCodeFixProvider(), doesn't fix the calls to the method 
            ["RCS1244"] = new DefaultExpressionCodeFixProvider(),
            ["RCS1246"] = new OptimizeLinqMethodCallCodeFixProvider(),
            ["RCS1249"] = new TokenCodeFixProvider(),
            ["RCS1250"] = new UseImplicitOrExplicitObjectCreationCodeFixProvider(),
            ["RCS1251"] = new RecordDeclarationCodeFixProvider(),
            ["RCS1252"] = new NormalizeUsageOfInfiniteLoopCodeFixProvider(),
            ["RCS1254"] = new EnumMemberDeclarationCodeFixProvider()
        };
}